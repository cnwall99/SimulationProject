rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
))
test_rsme = list(list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
))
#initialize a list of vectors which holds what model is selected by the algorithm
model_sel = list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
)
# Chunk 3
#Create a function to calculate rmse
rmse = function(actual, fitted, n) {
sqrt((1 / n) * sum((actual - fitted) ^ 2))
}
#Iterate through each value of sigma
for(i in 1:length(sigma)){
#Simulate nsims times
for(j in 1:nsims){
#select a random sample for trainnig and testing
train_data_idx = sample(1:nrow(study2), ntrain)
train = study2[train_data_idx, ]
test = study2[-train_data_idx, ]
#calculate noise
eps = rnorm(ntrain, mean = 0, sd = sigma[i])
#calculate y
y = b0 + b1*study2$x1 + b2*study2$x2 + b3*study2$x3 + b4*study2$x4 + b5*study2$x5 + b6*study2$x6 + b7*study2$x7 + b8*study2$x8 + b9*study2$x9
mod1 = lm(
y ~ x1,
data = study2
)
mod2 = lm(
y ~ x1 + x2,
data = study2
)
mod3 = lm(
y ~ x1 + x2 + x3,
data = study2
)
mod4 = lm(
y ~ x1 + x2 + x3 + x4,
data = study2
)
mod5 = lm(
y ~ x1 + x2 + x3 + x4 + x5,
data = study2
)
mod6 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6,
data = study2
)
mod7 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7,
data = study2
)
mod8 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8,
data = study2
)
mod9 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9,
data = study2
)
train_error = c(
rmse(y, predict(mod1, train), ntrain),
rmse(y, predict(mod2, train), ntrain),
rmse(y, predict(mod3, train), ntrain),
rmse(y, predict(mod4, train), ntrain),
rmse(y, predict(mod5, train), ntrain),
rmse(y, predict(mod6, train), ntrain),
rmse(y, predict(mod7, train), ntrain),
rmse(y, predict(mod8, train), ntrain),
rmse(y, predict(mod9, train), ntrain)
)
test_error = c(
rmse(y, predict(mod1, test), ntrain),
rmse(y, predict(mod2, test), ntrain),
rmse(y, predict(mod3, test), ntrain),
rmse(y, predict(mod4, test), ntrain),
rmse(y, predict(mod5, test), ntrain),
rmse(y, predict(mod6, test), ntrain),
rmse(y, predict(mod7, test), ntrain),
rmse(y, predict(mod8, test), ntrain),
rmse(y, predict(mod9, test), ntrain)
)
model_sel[[i]][j] = which.max(test_error)
train_rsme[[i]][[1]][j] = train_error[1]
train_rsme[[i]][[2]][j] = train_error[2]
train_rsme[[i]][[3]][j] = train_error[3]
train_rsme[[i]][[4]][j] = train_error[4]
train_rsme[[i]][[5]][j] = train_error[5]
train_rsme[[i]][[6]][j] = train_error[6]
train_rsme[[i]][[7]][j] = train_error[7]
train_rsme[[i]][[8]][j] = train_error[8]
train_rsme[[i]][[9]][j] = train_error[9]
test_rsme[[i]][[1]][j] = test_error[1]
test_rsme[[i]][[2]][j] = test_error[2]
test_rsme[[i]][[3]][j] = test_error[3]
test_rsme[[i]][[4]][j] = test_error[4]
test_rsme[[i]][[5]][j] = test_error[5]
test_rsme[[i]][[6]][j] = test_error[6]
test_rsme[[i]][[7]][j] = test_error[7]
test_rsme[[i]][[8]][j] = test_error[8]
test_rsme[[i]][[9]][j] = test_error[9]
}
}
# Chunk 4
#averaging train and test rsme for each value of sigma and model
avg_train_rsme = list(
c(
mean(train_rsme[[1]][[1]]),
mean(train_rsme[[1]][[2]]),
mean(train_rsme[[1]][[3]]),
mean(train_rsme[[1]][[4]]),
mean(train_rsme[[1]][[5]]),
mean(train_rsme[[1]][[6]]),
mean(train_rsme[[1]][[7]]),
mean(train_rsme[[1]][[8]]),
mean(train_rsme[[1]][[9]])
),
c(
mean(train_rsme[[2]][[1]]),
mean(train_rsme[[2]][[2]]),
mean(train_rsme[[2]][[3]]),
mean(train_rsme[[2]][[4]]),
mean(train_rsme[[2]][[5]]),
mean(train_rsme[[2]][[6]]),
mean(train_rsme[[2]][[7]]),
mean(train_rsme[[2]][[8]]),
mean(train_rsme[[2]][[9]])
),
c(
mean(train_rsme[[3]][[1]]),
mean(train_rsme[[3]][[2]]),
mean(train_rsme[[3]][[3]]),
mean(train_rsme[[3]][[4]]),
mean(train_rsme[[3]][[5]]),
mean(train_rsme[[3]][[6]]),
mean(train_rsme[[3]][[7]]),
mean(train_rsme[[3]][[8]]),
mean(train_rsme[[3]][[9]])
)
)
avg_test_rsme = list(
c(
mean(test_rsme[[1]][[1]]),
mean(test_rsme[[1]][[2]]),
mean(test_rsme[[1]][[3]]),
mean(test_rsme[[1]][[4]]),
mean(test_rsme[[1]][[5]]),
mean(test_rsme[[1]][[6]]),
mean(test_rsme[[1]][[7]]),
mean(test_rsme[[1]][[8]]),
mean(test_rsme[[1]][[9]])
),
c(
mean(test_rsme[[2]][[1]]),
mean(test_rsme[[2]][[2]]),
mean(test_rsme[[2]][[3]]),
mean(test_rsme[[2]][[4]]),
mean(test_rsme[[2]][[5]]),
mean(test_rsme[[2]][[6]]),
mean(test_rsme[[2]][[7]]),
mean(test_rsme[[2]][[8]]),
mean(test_rsme[[2]][[9]])
),
c(
mean(test_rsme[[1]][[1]]),
mean(test_rsme[[3]][[2]]),
mean(test_rsme[[3]][[3]]),
mean(test_rsme[[3]][[4]]),
mean(test_rsme[[3]][[5]]),
mean(test_rsme[[3]][[6]]),
mean(test_rsme[[3]][[7]]),
mean(test_rsme[[3]][[8]]),
mean(test_rsme[[3]][[9]])
)
)
#plot average test_rsme vs model size
par(mfrow = c(2,3))
plot(seq(1:9), avg_train_rsme[[1]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[1]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_train_rsme[[2]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[2]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_train_rsme[[3]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[3]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[1]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[1]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[2]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[2]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[3]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[3]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
par(mfrow = c(1,3))
hist(model_sel[[1]])
hist(model_sel[[2]])
hist(model_sel[[3]])
# Chunk 1: setup
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(fig.width=10, fig.height=6)
#Setting random seed
birthday = 19990619
set.seed(birthday)
# Chunk 2
#Model - Y = B0 + B1(x1) + B2(x2) + ..... + B6(x6) + e
b0 = 0
b1 = 3
b2 = -4
b3 = 1.6
b4 = -1.1
b5 = 0.7
b6 = 0.5
b7 = 0
b8 = 0
b9 = 0
n = 500
sigma = c(1, 2, 4)
nsims = 1000
study2 = read.csv("study_2.csv")[, 2: 10]
ntrain = 250
#initialize two 3 X n lists of vectors, train_rsme and test_rsme
train_rsme = list(list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
))
test_rsme = list(list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
),
list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
))
#initialize a list of vectors which holds what model is selected by the algorithm
model_sel = list(
rep(0, nsims),
rep(0, nsims),
rep(0, nsims)
)
# Chunk 3
#Create a function to calculate rmse
rmse = function(actual, fitted, n) {
sqrt((1 / n) * sum((actual - fitted) ^ 2))
}
#Iterate through each value of sigma
for(i in 1:length(sigma)){
#Simulate nsims times
for(j in 1:nsims){
#select a random sample for trainnig and testing
train_data_idx = sample(1:nrow(study2), ntrain)
train = study2[train_data_idx, ]
test = study2[-train_data_idx, ]
#calculate noise
eps = rnorm(ntrain, mean = 0, sd = sigma[i])
#calculate y
y = b0 + b1*study2$x1 + b2*study2$x2 + b3*study2$x3 + b4*study2$x4 + b5*study2$x5 + b6*study2$x6 + b7*study2$x7 + b8*study2$x8 + b9*study2$x9
mod1 = lm(
y ~ x1,
data = study2
)
mod2 = lm(
y ~ x1 + x2,
data = study2
)
mod3 = lm(
y ~ x1 + x2 + x3,
data = study2
)
mod4 = lm(
y ~ x1 + x2 + x3 + x4,
data = study2
)
mod5 = lm(
y ~ x1 + x2 + x3 + x4 + x5,
data = study2
)
mod6 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6,
data = study2
)
mod7 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7,
data = study2
)
mod8 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8,
data = study2
)
mod9 = lm(
y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9,
data = study2
)
train_error = c(
rmse(y, predict(mod1, train), ntrain),
rmse(y, predict(mod2, train), ntrain),
rmse(y, predict(mod3, train), ntrain),
rmse(y, predict(mod4, train), ntrain),
rmse(y, predict(mod5, train), ntrain),
rmse(y, predict(mod6, train), ntrain),
rmse(y, predict(mod7, train), ntrain),
rmse(y, predict(mod8, train), ntrain),
rmse(y, predict(mod9, train), ntrain)
)
test_error = c(
rmse(y, predict(mod1, test), ntrain),
rmse(y, predict(mod2, test), ntrain),
rmse(y, predict(mod3, test), ntrain),
rmse(y, predict(mod4, test), ntrain),
rmse(y, predict(mod5, test), ntrain),
rmse(y, predict(mod6, test), ntrain),
rmse(y, predict(mod7, test), ntrain),
rmse(y, predict(mod8, test), ntrain),
rmse(y, predict(mod9, test), ntrain)
)
model_sel[[i]][j] = which.min(test_error)
train_rsme[[i]][[1]][j] = train_error[1]
train_rsme[[i]][[2]][j] = train_error[2]
train_rsme[[i]][[3]][j] = train_error[3]
train_rsme[[i]][[4]][j] = train_error[4]
train_rsme[[i]][[5]][j] = train_error[5]
train_rsme[[i]][[6]][j] = train_error[6]
train_rsme[[i]][[7]][j] = train_error[7]
train_rsme[[i]][[8]][j] = train_error[8]
train_rsme[[i]][[9]][j] = train_error[9]
test_rsme[[i]][[1]][j] = test_error[1]
test_rsme[[i]][[2]][j] = test_error[2]
test_rsme[[i]][[3]][j] = test_error[3]
test_rsme[[i]][[4]][j] = test_error[4]
test_rsme[[i]][[5]][j] = test_error[5]
test_rsme[[i]][[6]][j] = test_error[6]
test_rsme[[i]][[7]][j] = test_error[7]
test_rsme[[i]][[8]][j] = test_error[8]
test_rsme[[i]][[9]][j] = test_error[9]
}
}
# Chunk 4
#averaging train and test rsme for each value of sigma and model
avg_train_rsme = list(
c(
mean(train_rsme[[1]][[1]]),
mean(train_rsme[[1]][[2]]),
mean(train_rsme[[1]][[3]]),
mean(train_rsme[[1]][[4]]),
mean(train_rsme[[1]][[5]]),
mean(train_rsme[[1]][[6]]),
mean(train_rsme[[1]][[7]]),
mean(train_rsme[[1]][[8]]),
mean(train_rsme[[1]][[9]])
),
c(
mean(train_rsme[[2]][[1]]),
mean(train_rsme[[2]][[2]]),
mean(train_rsme[[2]][[3]]),
mean(train_rsme[[2]][[4]]),
mean(train_rsme[[2]][[5]]),
mean(train_rsme[[2]][[6]]),
mean(train_rsme[[2]][[7]]),
mean(train_rsme[[2]][[8]]),
mean(train_rsme[[2]][[9]])
),
c(
mean(train_rsme[[3]][[1]]),
mean(train_rsme[[3]][[2]]),
mean(train_rsme[[3]][[3]]),
mean(train_rsme[[3]][[4]]),
mean(train_rsme[[3]][[5]]),
mean(train_rsme[[3]][[6]]),
mean(train_rsme[[3]][[7]]),
mean(train_rsme[[3]][[8]]),
mean(train_rsme[[3]][[9]])
)
)
avg_test_rsme = list(
c(
mean(test_rsme[[1]][[1]]),
mean(test_rsme[[1]][[2]]),
mean(test_rsme[[1]][[3]]),
mean(test_rsme[[1]][[4]]),
mean(test_rsme[[1]][[5]]),
mean(test_rsme[[1]][[6]]),
mean(test_rsme[[1]][[7]]),
mean(test_rsme[[1]][[8]]),
mean(test_rsme[[1]][[9]])
),
c(
mean(test_rsme[[2]][[1]]),
mean(test_rsme[[2]][[2]]),
mean(test_rsme[[2]][[3]]),
mean(test_rsme[[2]][[4]]),
mean(test_rsme[[2]][[5]]),
mean(test_rsme[[2]][[6]]),
mean(test_rsme[[2]][[7]]),
mean(test_rsme[[2]][[8]]),
mean(test_rsme[[2]][[9]])
),
c(
mean(test_rsme[[1]][[1]]),
mean(test_rsme[[3]][[2]]),
mean(test_rsme[[3]][[3]]),
mean(test_rsme[[3]][[4]]),
mean(test_rsme[[3]][[5]]),
mean(test_rsme[[3]][[6]]),
mean(test_rsme[[3]][[7]]),
mean(test_rsme[[3]][[8]]),
mean(test_rsme[[3]][[9]])
)
)
#plot average test_rsme vs model size
par(mfrow = c(2,3))
plot(seq(1:9), avg_train_rsme[[1]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[1]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_train_rsme[[2]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[2]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_train_rsme[[3]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Train RSME", main = paste("Train RSME vs Factors: Sigma = ", sigma[3]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[1]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[1]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[2]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[2]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
plot(seq(1:9), avg_test_rsme[[3]], col = "blue", pch = 19, xlab = "Number of Factors", ylab = "Average Test RSME", main = paste("Test RSME vs Factors: Sigma = ", sigma[3]), cex = 2, ylim = c(11.2, 12.1))
axis(1, at = seq(1:9))
# Chunk 5
par(mfrow = c(1,3))
hist(model_sel[[1]])
hist(model_sel[[2]])
hist(model_sel[[3]])
